AWSTemplateFormatVersion: 2010-09-09
Description: This template is used to create a CI/CD Pipeline that deploys a React Web app to S3 for static website hosting.

Parameters:
  Stage:
    Description: "Deployment stage (e.g., dev, staging, prod)"
    Type: String

  AppName:
    Description: "Name of the application"
    Type: String

  GithubUserName:
    Description: "GitHub username owning the repository"
    Type: String

  GithubRepo:
    Description: "GitHub repository containing the source code"
    Type: String

  GithubBranch:
    Description: "Default branch of the GitHub repository to use for deployment"
    Type: String
    AllowedValues:
      - master
      - main
      - develop
    Default: "main"

  GithubOAuthToken:
    Description: "OAuth token for GitHub to authorize integration (must have permissions to access the repo)"
    Type: String
    NoEcho: true
  CodeBuildImage:
    Type: String
    Default: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
  BuildSpecPath:
    Type: String
    Default: "buildspec.yml"

# Resources that will be provisioned by this template.
Resources:

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      Name: !Sub "${AppName}-${AWS::AccountId}-CodePipeline-${Stage}"
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions: 
            - Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts: 
                - Name: MyApp
              Configuration:                
                Repo: !Ref GithubRepo
                Branch: !Ref GithubBranch
                Owner: !Ref GithubUserName
                OAuthToken: !Ref GithubOAuthToken
        
        - Name: Build
          Actions: 
            - Name: BuildAction
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts: 
                - Name: MyApp
              OutputArtifacts: 
                - Name: MyAppBuild
              Configuration:
                ProjectName: !Ref CodeBuild

        - Name: Deploy
          Actions: 
            - Name: DeployAction
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              InputArtifacts: 
                - Name: MyAppBuild
              Configuration:                
                BucketName: !Ref DeployBucket
                Extract: 'true'

  # Create role for CodeBuild with managed policies
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      Path: /service-role/

  # Create role for CodePipeline with managed policies
  CodePipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /service-role/
  
  # Create Code Build Project
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts: { Type: CODEPIPELINE, Name: MyProject }
      Source: { Type: CODEPIPELINE, BuildSpec: !Ref BuildSpecPath }
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildImage
  
 # Dynamically named S3 Buckets without hardcoded names
  PipelineBucket: 
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-${AWS::AccountId}-pipelineartifacts-${Stage}"

  DeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-${AWS::AccountId}-website-${Stage}"
      WebsiteConfiguration: { IndexDocument: index.html }
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [GET]

  # More dynamic BucketPolicy
  DeploymentBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref DeployBucket
      PolicyDocument: 
        Statement: 
          - Action: ["s3:GetObject"]
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${DeployBucket}/*"
            Principal: "*"